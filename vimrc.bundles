if &compatible
  set nocompatible
end

call plug#begin('~/.vim/bundle')

" Define bundles via Github repos
Plug 'kchmck/vim-coffee-script'
Plug 'NLKNguyen/papercolor-theme'
Plug 'pbrisbin/vim-mkdir'
Plug 'slim-template/vim-slim'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/gem-browse'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-rake'
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-projectionist'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'stephpy/vim-yaml'
Plug 'SirVer/ultisnips'
Plug 'mhinz/vim-grepper'
Plug 'mustache/vim-mustache-handlebars'
Plug 'mattn/emmet-vim'
Plug 'mxw/vim-jsx'
Plug 'elzr/vim-json'
Plug 'othree/es.next.syntax.vim'
Plug 'othree/jsdoc-syntax.vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'elixir-lang/vim-elixir'
Plug 'vim-scripts/bufexplorer.zip'
Plug 'ledger/vim-ledger'
Plug 'kurko/smartest.vim'
Plug 'crusoexia/vim-monokai'
Plug 'scrooloose/syntastic'
Plug 'othree/csscomplete.vim'
Plug 'kien/ctrlp.vim'
Plug 'othree/yajs.vim', { 'for': 'javascript' }
Plug 'gavocanov/vim-js-indent'
Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
Plug 'othree/jspc.vim'
Plug 'ramitos/jsctags'
Plug 'rking/ag.vim'
Plug 'vim-airline/vim-airline'
Plug 'w0ng/vim-hybrid'
Plug 'junegunn/gv.vim'

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()

nnoremap <leader>b :BufExplorerHorizontalSplit<CR>

" CtrlP
let g:ctrlp_custom_ignore = {
  \ 'dir':  '^\.git\|node_modules\|bin\|^\.hg\|\.svn\|build\|log\|resources\|coverage\|doc\|tmp\|public/assets\|vendor\|Android',
  \ 'file': '\.jpg$\|\.png$\|\.exe$\|\.so$\|tags$\|\.dll$'
  \ }
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_max_files = 0
let g:ctrlp_mruf_max = 500
let g:ctrlp_mruf_relative = 1
let g:ctrlp_buftag_ctags_bin = '/usr/local/bin/ctags'
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20'

let g:vim_json_syntax_conceal = 0
" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  " let g:ctrlp_use_caching = 1
endif

let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_extensions = []

let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_error_symbol = "»"
let g:syntastic_warning_symbol = "•"
let g:syntastic_style_error_symbol = "»"
let g:syntastic_style_warning_symbol = "•"
let g:syntastic_stl_format = ' [%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_ruby_checkers = ['mri', 'rubocop', 'rubylint']
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_always_populate_loc_list = 1
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:ag_prg="/usr/local/bin/ag --column"
" Always start searching from your project root instead of the cwd
let g:ag_working_path_mode="r"

" Update the bult-in CSS complete function to latest CSS standard
autocmd FileType css set omnifunc=csscomplete#CompleteCSS noci

let g:ledger_extra_options = '--pedantic --explicit --check-payees'
let g:ledger_default_commodity = 'RON'
let g:ledger_maxwidth = 80
let g:ledger_align_at = 50
let g:ledger_decimal_sep = ','
let g:ledger_commodity_before = 0
let g:ledger_commodity_sep = ' '

let g:bufExplorerDefaultHelp=0
let g:bufExplorerDisableDefaultKeyMapping=1
let g:bufExplorerShowRelativePath=1
let g:bufExplorerShowDirectories=0

let g:UltiSnipsDontReverseSearchPath = '1'
let g:UltiSnipsSnippetDirectories = ['UltiSnips']
let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsListSnippets = '<c-l>'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

let g:grepper = { 'programs': ['ag'] }

" Obviously depends on <https://github.com/unblevable/quick-scope> being installed.
function! Quick_scope_selective(movement)
    let needs_disabling = 0
    if !g:qs_enable
        QuickScopeToggle
        redraw
        let needs_disabling = 1
    endif

    let letter = nr2char(getchar())

    if needs_disabling
        QuickScopeToggle
    endif

    return a:movement . letter
endfunction

" Load a color theme
set background=dark
colorscheme hybrid

" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

" Apply macro to the visually selected lines
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction
