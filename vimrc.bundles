if &compatible
  set nocompatible
end

call plug#begin('~/.vim/bundle')

" Define bundles via Github repos
Plug 'kchmck/vim-coffee-script'
" Plug 'NLKNguyen/papercolor-theme'
Plug 'pbrisbin/vim-mkdir'
Plug 'slim-template/vim-slim'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/gem-browse'
Plug 'tpope/vim-eunuch'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tpope/vim-rake'
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-projectionist'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'rking/ag.vim'
Plug 'stephpy/vim-yaml'
Plug 'SirVer/ultisnips'
Plug 'mhinz/vim-grepper'
Plug 'mustache/vim-mustache-handlebars'
Plug 'mattn/emmet-vim'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'elixir-lang/vim-elixir'
Plug 'vim-scripts/bufexplorer.zip'
Plug 'ledger/vim-ledger'
Plug 'kurko/smartest.vim'
Plug 'crusoexia/vim-monokai'
Plug 'benekastah/neomake'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()

nnoremap <leader>t :call RunTestFile()<cr>
nnoremap <leader>r :call RunNearestTest()<cr>

nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>B :BufExplorer<cr>

let g:neomake_ruby_rubocop_maker = { 'args': ['-c.rubocop.yml', '-n'], 'cwd': getcwd() }
let g:neomake_ruby_enabled_makers = ['mri', 'rubocop']

let g:ledger_extra_options = '--pedantic --explicit --check-payees'
let g:ledger_default_commodity = 'RON'
au FileType ledger inoremap <silent><buffer> <C-l><Esc>:call ledger#align_amount_at_cursor()<CR>

let g:bufExplorerDefaultHelp=0
let g:bufExplorerDisableDefaultKeyMapping=1
let g:bufExplorerShowRelativePath=1
let g:bufExplorerShowDirectories=0

let g:UltiSnipsDontReverseSearchPath = '1'
let g:UltiSnipsSnippetDirectories = ['UltiSnips']
let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsListSnippets = '<c-l>'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

let g:grepper = { 'programs': ['ag'] }

" Obviously depends on <https://github.com/unblevable/quick-scope> being installed.
function! Quick_scope_selective(movement)
    let needs_disabling = 0
    if !g:qs_enable
        QuickScopeToggle
        redraw
        let needs_disabling = 1
    endif

    let letter = nr2char(getchar())

    if needs_disabling
        QuickScopeToggle
    endif

    return a:movement . letter
endfunction

map <leader>n :NERDTreeToggle<CR>
map <leader>j :NERDTreeFind<CR>

" Load a color theme
colorscheme monokai
