snippet Given
Given(/^$1$/) do
	$0
end
endsnippet

snippet When
When(/^$1$/) do
	$0
end
endsnippet

snippet And
And(/^$1$/) do
	$0
end
endsnippet

snippet Then
Then(/^$1$/) do
	$0
end
endsnippet

snippet sop
save_and_open_page$0
endsnippet

snippet con
context '$1' do
	$0
end
endsnippet

snippet desc
describe '$1' do
	$0
end
endsnippet

snippet let
let(:$1) { $0 }
endsnippet

snippet letc
let(:$1) { create(:$1) }
endsnippet

snippet letd
let(:$1) { double("$1") }
endsnippet

snippet ac
add_column :${1:table_name}, :${2:column_name}, :${3:column_type}$0
endsnippet

snippet rt
render_template('$1')
endsnippet

snippet rc
rename_column :${1:table_name}, :${2:old_column_name}, :${3:new_column_name}$0
endsnippet

snippet dp
puts "------------------------\n\n"
puts $0.inspect
puts "------------------------\n\n"
endsnippet

snippet fd "FactoryGirl.define"
FactoryGirl.define do
	factory :$1 do
		$0
	end
end
endsnippet

snippet step
step %($0)
endsnippet

snippet fi "fill_in"
fill_in '$1', with: '$2'$0
endsnippet

snippet vp "validates presence"
validates :$1, presence: true$0
endsnippet

snippet vl "validates length"
validates :$1, length: { minimum: $0 }
endsnippet

snippet rsfind "find_resource"
def find_${1/./\l$0/}
	@${1/./\l$0/} = ${1:Model}.find(params.require(:id))
end
endsnippet

snippet rsparams "resource_params"
def ${1:resource_name}_params
	params.require(:$1).permit($0)
end
endsnippet

snippet rsindex "index controller action"
def index
	@${1/./\l$0/}s = ${1:Model}.all
end
endsnippet

snippet rsnew "#new controller action"
def new
	@${1/./\l$0/} = ${1:Model}.new
end
endsnippet

snippet rscreate "#create controller action"
def create
	@${1/./\l$0/} = ${1:Model}.new(${1/./\l$0/}_params)

	if @${1/./\l$0/}.save
		flash[:notice] = t('.success')
		redirect_to(@${1/./\l$0/})
	else
		flash[:alert] = t('.failure')
		render action: :new
	end
end
endsnippet

snippet rsupdate "#update controller action"
def update
	if @${1:resource_name}.update($1_params)
		flash[:notice] = t('.success')
		redirect_to(@$1)
	else
		render action: :edit
	end
end
endsnippet

snippet resource "resource controller"
class ${1:Model}sController < ApplicationController
	before_action :find_${1/./\l$0/}, only: [:edit, :show, :update, :destroy]

	def index
		@${1/./\l$0/}s = $1.all
	end

	def new
		@${1/./\l$0/} = $1.new
	end

	def edit
	end

	def show
	end

	def create
		@${1/./\l$0/} = $1.new(${1/./\l$0/}_params)

		if @${1/./\l$0/}.save
			flash[:notice] = t('.success')
			redirect_to(@${1/./\l$0/})
		else
			flash[:alert] = t('.failure')
			render action: :new
		end
	end

	def update
		if @${1/./\l$0/}.update(${1/./\l$0/}_params)
			flash[:notice] = t('.success')
			redirect_to(@${1/./\l$0/})
		else
			render action: :edit
		end
	end

	def destroy
		@${1/./\l$0/}.destroy
		flash[:notice] = t('.success')
		redirect_to root_path
	end

	private

		def ${1/./\l$0/}_params
			params.require(:${1/./\l$0/}).permit($0)
		end

		def find_${1/./\l$0/}
			@${1/./\l$0/} = $1.find(params.require(:id))
		end
end
endsnippet

snippet sc "feature scenario"
scenario '$1' do
	$0
end
endsnippet

snippet ss "screenshot_and_open_image"
screenshot_and_open_image
endsnippet

snippet itex "it { is_expected.to }"
it { is_expected.to $0 }
endsnippet

snippet ex "expect(^).to ..."
expect($1).to $0
endsnippet

snippet exe "expect(^).to eq(^)"
expect($1).to eq($0)
endsnippet

snippet exm "expect(^).to match([^])"
expect($1).to match([$0])
endsnippet

snippet exp "expect(page).to ..."
expect(page).to have_css('$1', text: '$2')$0
endsnippet

snippet fgd "FactoryGirl.define"
FactoryGirl.define do
	factory :$1 do
		$0
	end
end
endsnippet

snippet hatbm "has_many"
has_many :$0
endsnippet

snippet hatbm "has_and_belongs_to_many"
has_and_belongs_to_many :$0
endsnippet
